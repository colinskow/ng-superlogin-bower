{"version":3,"sources":["ng-superlogin.js"],"names":["angular","module","config","$httpProvider","interceptors","push","factory","Date","now","provider","$windowProvider","_config","_session","_refreshCB","_refreshInProgress","$window","$get","self","this","configure","baseUrl","endpoints","Array","noDefaultEndpoint","parser","document","createElement","href","host","providers","$rootScope","slDateNow","deleteSession","storage","removeItem","checkExpired","user_id","expires","timeDiff","serverTimeDiff","Math","abs","estimatedServerTime","$broadcast","sessionStorage","localStorage","superlogin","$on","event","session","authenticated","JSON","parse","getItem","getSession","setSession","setItem","stringify","getConfig","getDbUrl","dbName","userDBs","confirmRole","role","roles","length","indexOf","confirmAnyRole","i","confirmAllRoles","checkRefresh","issued","threshold","refreshThreshold","duration","elapsed","ratio","then","onRefresh","cb","superloginSessionProvider","$http","$q","$interval","superloginSession","refresh","post","res","data","token","when","err","reject","oAuthPopup","url","options","oauthDeferred","defer","oauthComplete","windowName","windowOptions","_oauthWindow","open","_oauthInterval","closed","cancel","promise","capitalizeFirstLetter","string","charAt","toUpperCase","slice","oauthSession","error","link","resolve","$apply","authenticate","deferred","newSession","login","credentials","username","password","req","method","register","registration","logout","msg","logoutAll","logoutOthers","socialAuth","windowTitle","tokenSocialAuth","accessToken","access_token","tokenLink","linkURL","unlink","verifyEmail","get","forgotPassword","email","resetPassword","form","changePassword","changeEmail","newEmail","validateUsername","encodeURIComponent","status","validateEmail","service","$location","checkEndpoint","request","headers","Authorization","responseError","response"],"mappings":";;;;;CAKA,SAAAA,GALA,YAIAA,GAAAC,OAAA,iBAEAC,QAAA,gBAAA,SAAAC,GACAA,EAAAC,aAAAC,KAAA,4BAGAC,QAAA,YAAA,WACA,MAAA,YACA,MAAAC,MAAAC,SAIAC,SAAA,qBAAA,kBAAA,SAAAC,GACA,GACAC,GAAAC,EAAAC,EAAAC,EADAC,EAAAL,EAAAM,OAEAC,EAAAC,IAEAA,MAAAC,UAAA,SAAAjB,GAMA,GALAA,EAAAA,MACAA,EAAAkB,QAAAlB,EAAAkB,SAAA,SACAlB,EAAAmB,WAAAnB,EAAAmB,oBAAAC,SACApB,EAAAmB,eAEAnB,EAAAqB,kBAAA,CACA,GAAAC,GAAAT,EAAAU,SAAAC,cAAA,IACAF,GAAAG,KAAA,IACAzB,EAAAmB,UAAAhB,KAAAmB,EAAAI,MAEA1B,EAAA2B,UAAA3B,EAAA2B,cACAlB,EAAAT,GAGAgB,KAAAF,MAAA,UAAA,aAAA,YAAA,SAAAD,EAAAe,EAAAC,GA6BA,QAAAC,KACAC,EAAAC,WAAA,sBACAtB,EAAA,KAGA,QAAAuB,KAEA,GAAAvB,GAAAA,EAAAwB,QAAA,CAGA,GAAAC,GAAAzB,EAAAyB,QACAC,EAAA1B,EAAA2B,gBAAA,CAEAC,MAAAC,IAAAH,GAAA,MACAA,EAAA,EAEA,IAAAI,GAAAX,IAAAO,CACAI,GAAAL,IACAL,IACAF,EAAAa,WAAA,YAAA,qBA9CAhC,GACAM,EAAAE,aAEA,IAAAc,EA6DA,OA3DAA,GADA,YAAAtB,EAAAsB,QACAlB,EAAA6B,eAEA7B,EAAA8B,aAEAf,EAAAgB,cAGAhB,EAAAiB,IAAA,WAAA,SAAAC,EAAAC,GACAnB,EAAAgB,WAAAG,QAAAA,EACAnB,EAAAgB,WAAAI,eAAA,IAEApB,EAAAiB,IAAA,YAAA,WACAjB,EAAAgB,WAAAG,QAAA,KACAnB,EAAAgB,WAAAI,eAAA,IAIAtC,EAAAuC,KAAAC,MAAAnB,EAAAoB,QAAA,uBACAzC,GACAkB,EAAAa,WAAA,WAAA/B,GA2BA,YAAAD,EAAAwB,cAAA,gBAAAxB,EAAAwB,cACAA,IAEA,gBAAAxB,EAAAwB,eAEAL,EAAAiB,IAAA,oBAAA,WACAZ,MAEAL,EAAAiB,IAAA,oBAAA,WACAZ,QAKAe,cAAA,WACA,SAAAtC,IAAAA,EAAAwB,UAEAkB,WAAA,WACA,MAAA1C,IAAAuC,KAAAC,MAAAnB,EAAAoB,QAAA,wBAEAE,WAAA,SAAAN,GACArC,EAAAqC,EACAhB,EAAAuB,QAAA,qBAAAL,KAAAM,UAAA7C,KAEAoB,cAAAA,EACA0B,UAAA,WACA,MAAA/C,IAEAgD,SAAA,SAAAC,GACA,MAAAhD,GAAAiD,SAAAjD,EAAAiD,QAAAD,GACAhD,EAAAiD,QAAAD,GAEA,MAGAE,YAAA,SAAAC,GACA,MAAAnD,IAAAA,EAAAoD,OAAApD,EAAAoD,MAAAC,OACA,KAAArD,EAAAoD,MAAAE,QAAAH,IADA,GAGAI,eAAA,SAAAH,GACA,IAAApD,IAAAA,EAAAoD,QAAApD,EAAAoD,MAAAC,OAAA,OAAA,CACA,KAAA,GAAAG,GAAA,EAAAA,EAAAJ,EAAAC,OAAAG,IACA,GAAA,KAAAxD,EAAAoD,MAAAE,QAAAF,EAAAI,IAAA,OAAA,GAGAC,gBAAA,SAAAL,GACA,IAAApD,IAAAA,EAAAoD,QAAApD,EAAAoD,MAAAC,OAAA,OAAA,CACA,KAAA,GAAAG,GAAA,EAAAA,EAAAJ,EAAAC,OAAAG,IACA,GAAA,KAAAxD,EAAAoD,MAAAE,QAAAF,EAAAI,IAAA,OAAA,CAEA,QAAA,GAEAjC,aAAAA,EACAmC,aAAA,WAEA,IAAAxD,GAAAF,GAAAA,EAAAwB,QAAA,CAGA,GAAAmC,GAAA3D,EAAA2D,OACAlC,EAAAzB,EAAAyB,QACAmC,EAAA7D,EAAA8D,kBAAA,GACAC,EAAArC,EAAAkC,EACAjC,EAAA1B,EAAA2B,gBAAA,CACAC,MAAAC,IAAAH,GAAA,MACAA,EAAA,EAEA,IAAAI,GAAAX,IAAAO,EACAqC,EAAAjC,EAAA6B,EACAK,EAAAD,EAAAD,CACAE,GAAAJ,GAAA,kBAAA3D,KACAC,GAAA,EACAD,IACAgE,KAAA,WACA/D,GAAA,GACA,WACAA,GAAA,OAIAgE,UAAA,SAAAC,GACAlE,EAAAkE,SAOAtE,SAAA,cAAA,4BAAA,SAAAuE,GAEA9D,KAAAC,UAAA6D,EAAA7D,UAEAD,KAAAF,MAAA,QAAA,KAAA,UAAA,YAAA,aAAA,oBAAA,YAAA,SAAAiE,EAAAC,EAAAnE,EAAAoE,EAAArD,EAAAsD,EAAArD,GAiQA,QAAAsD,KACA,GAAApC,GAAAmC,EAAA9B,YACA,OAAA2B,GAAAK,KAAAF,EAAA1B,YAAAtC,QAAA,cACAyD,KAAA,SAAAU,GACA,MAAAA,GAAAC,KAAAC,OAAAF,EAAAC,KAAAnD,SACAY,EAAAZ,QAAAkD,EAAAC,KAAAnD,QACAY,EAAAwC,MAAAF,EAAAC,KAAAC,MACAL,EAAA7B,WAAAN,GACAnB,EAAAa,WAAA,aAAAM,GACAiC,EAAAQ,KAAAzC,IALA,QAOA,SAAA0C,GACA,MAAAT,GAAAU,OAAAD,EAAAH,QAIA,QAAAK,GAAAC,EAAAC,GACAC,EAAAd,EAAAe,QACAC,GAAA,EACAH,EAAAI,WAAAJ,EAAAI,YAAA,eACAJ,EAAAK,cAAAL,EAAAK,eAAA,0CACA,IAAAC,GAAAtF,EAAAuF,KAAAR,EAAAC,EAAAI,WAAAJ,EAAAK,eACAG,EAAApB,EAAA,WACAkB,EAAAG,SACArB,EAAAsB,OAAAF,GACAL,IACAF,EAAAJ,OAAA,2BACAM,GAAA,KAGA,IACA,OAAAF,GAAAU,QAIA,QAAAC,GAAAC,GACA,MAAAA,GAAAC,OAAA,GAAAC,cAAAF,EAAAG,MAAA,GAnSA,GAAAf,GAAAE,CAqBA,OAnBAnF,GAAA+B,cACA/B,EAAA+B,WAAAkE,aAAA,SAAAC,EAAAhE,EAAAiE,IACAD,GAAAhE,GACAA,EAAAV,eAAAU,EAAAsB,OAAAxC,IACAqD,EAAA7B,WAAAN,GACAnB,EAAAa,WAAA,WAAAM,GACA+C,EAAAmB,QAAAlE,KACAgE,GAAAC,GACApF,EAAAa,WAAA,UAAAuE,GACAlB,EAAAmB,QAAAR,EAAAO,GAAA,0BAEAlB,EAAAJ,OAAAqB,GAEAf,GAAA,EACApE,EAAAsF,UAGAhC,EAAAN,UAAAO,IAGAnC,cAAAkC,EAAAlC,cACAQ,UAAA0B,EAAA1B,UACAJ,WAAA8B,EAAA9B,WACAtB,cAAAoD,EAAApD,cACA2B,SAAAyB,EAAAzB,SACAG,YAAAsB,EAAAtB,YACAK,eAAAiB,EAAAjB,eACAE,gBAAAe,EAAAf,gBACAgB,QAAAA,EACAf,aAAAc,EAAAd,aACAnC,aAAAiD,EAAAjD,aACAkF,aAAA,WACA,GAAAC,GAAApC,EAAAe,QACAhD,EAAAmC,EAAA9B,YAQA,OAPAL,GACAqE,EAAAH,QAAAlE,GAEAnB,EAAAiB,IAAA,WAAA,SAAAC,EAAAuE,GACAD,EAAAH,QAAAI,KAGAD,EAAAZ,SAEAc,MAAA,SAAAC,GACA,IAAAA,EAAAC,WAAAD,EAAAE,SACA,MAAAzC,GAAAU,OAAA,kCAEA,IAAAgC,IACAC,OAAA,OACA/B,IAAAV,EAAA1B,YAAAtC,QAAA,QACAoE,KAAAiC,EAEA,OAAAxC,GAAA2C,GACA/C,KAAA,SAAAU,GAIA,MAHAA,GAAAC,KAAAjD,eAAAgD,EAAAC,KAAAjB,OAAAxC,IACAqD,EAAA7B,WAAAgC,EAAAC,MACA1D,EAAAa,WAAA,WAAA4C,EAAAC,MACAN,EAAAQ,KAAAH,EAAAC,OACA,SAAAG,GAEA,MADAP,GAAApD,gBACAkD,EAAAU,OAAAD,EAAAH,SAGAsC,SAAA,SAAAC,GACA,GAAAH,IACAC,OAAA,OACA/B,IAAAV,EAAA1B,YAAAtC,QAAA,WACAoE,KAAAuC,EAEA,OAAA9C,GAAA2C,GACA/C,KAAA,SAAAU,GAMA,MALAA,GAAAC,KAAApD,SAAAmD,EAAAC,KAAAC,QACAF,EAAAC,KAAAjD,eAAAgD,EAAAC,KAAAjB,OAAAxC,IACAqD,EAAA7B,WAAAgC,EAAAC,MACA1D,EAAAa,WAAA,WAAA4C,EAAAC,OAEAN,EAAAQ,KAAAH,EAAAC,OACA,SAAAG,GACA,MAAAT,GAAAU,OAAAD,EAAAH,SAGAwC,OAAA,SAAAC,GACA,MAAAhD,GAAAK,KAAAF,EAAA1B,YAAAtC,QAAA,aACAyD,KAAA,SAAAU,GAGA,MAFAH,GAAApD,gBACAF,EAAAa,WAAA,YAAAsF,GAAA,cACA/C,EAAAQ,KAAAH,EAAAC,OACA,SAAAG,GAGA,MAFAP,GAAApD,gBACAF,EAAAa,WAAA,YAAAsF,GAAA,cACA/C,EAAAU,OAAAD,EAAAH,SAGA0C,UAAA,SAAAD,GACA,MAAAhD,GAAAK,KAAAF,EAAA1B,YAAAtC,QAAA,iBACAyD,KAAA,SAAAU,GAGA,MAFAH,GAAApD,gBACAF,EAAAa,WAAA,YAAAsF,GAAA,cACA/C,EAAAQ,KAAAH,EAAAC,OACA,SAAAG,GAGA,MAFAP,GAAApD,gBACAF,EAAAa,WAAA,YAAAsF,GAAA,cACA/C,EAAAQ,KAAAC,EAAAH,SAGA2C,aAAA,WACA,MAAAlD,GAAAK,KAAAF,EAAA1B,YAAAtC,QAAA,oBACAyD,KAAA,SAAAU,GACA,MAAAL,GAAAQ,KAAAH,EAAAC,OACA,SAAAG,GACA,MAAAT,GAAAU,OAAAD,EAAAH,SAGA4C,WAAA,SAAA3H,GACA,GAAAoB,GAAAuD,EAAA1B,YAAA7B,SACA,OAAA,KAAAA,EAAAqC,QAAAzD,GACAyE,EAAAU,QAAAqB,MAAA,YAAAxG,EAAA,oBAEAoF,EAAAT,EAAA1B,YAAAtC,QAAAX,GAAA4H,YAAA,cAAA1B,EAAAlG,MAEA6H,gBAAA,SAAA7H,EAAA8H,GACA,GAAA1G,GAAAuD,EAAA1B,YAAA7B,SACA,OAAA,KAAAA,EAAAqC,QAAAzD,GACAyE,EAAAU,QAAAqB,MAAA,YAAAxG,EAAA,oBAEAwE,EAAAK,KAAAF,EAAA1B,YAAAtC,QAAAX,EAAA,UAAA+H,aAAAD,IACA1D,KAAA,SAAAU,GAMA,MALAA,GAAAC,KAAApD,SAAAmD,EAAAC,KAAAC,QACAF,EAAAC,KAAAjD,eAAAgD,EAAAC,KAAAjB,OAAAxC,IACAqD,EAAA7B,WAAAgC,EAAAC,MACA1D,EAAAa,WAAA,WAAA4C,EAAAC,OAEAN,EAAAQ,KAAAH,EAAAC,OACA,SAAAG,GACA,MAAAT,GAAAU,OAAAD,EAAAH,SAGAiD,UAAA,SAAAhI,EAAA8H,GACA,GAAA1G,GAAAuD,EAAA1B,YAAA7B,SACA,OAAA,KAAAA,EAAAqC,QAAAzD,GACAyE,EAAAU,QAAAqB,MAAA,YAAAxG,EAAA,oBAEAwE,EAAAK,KAAAF,EAAA1B,YAAAtC,QAAA,QAAAX,EAAA,UAAA+H,aAAAD,IACA1D,KAAA,SAAAU,GACA,MAAAL,GAAAQ,KAAAH,EAAAC,OACA,SAAAG,GACA,MAAAT,GAAAU,OAAAD,EAAAH,SAGA0B,KAAA,SAAAzG,GACA,GAAAoB,GAAAuD,EAAA1B,YAAA7B,SACA,IAAA,KAAAA,EAAAqC,QAAAzD,GACA,MAAAyE,GAAAU,QAAAqB,MAAA,YAAAxG,EAAA,mBAEA,IAAA2E,EAAAlC,gBAAA,CACA,GAAAD,GAAAmC,EAAA9B,aACAoF,EAAAtD,EAAA1B,YAAAtC,QAAA,QAAAX,EAAA,iBAAAwC,EAAAwC,MAAA,IAAAxC,EAAA0E,QACA,OAAA9B,GAAA6C,GAAAL,YAAA,wBAAA1B,EAAAlG,KAEA,MAAAyE,GAAAU,QAAAqB,MAAA,6BAEA0B,OAAA,SAAAlI,GACA,GAAAoB,GAAAuD,EAAA1B,YAAA7B,SACA,OAAA,KAAAA,EAAAqC,QAAAzD,GACAyE,EAAAU,QAAAqB,MAAA,YAAAxG,EAAA,oBAEA2E,EAAAlC,gBACA+B,EAAAK,KAAAF,EAAA1B,YAAAtC,QAAA,UAAAX,GACAoE,KAAA,SAAAU,GACA,MAAAL,GAAAQ,KAAAH,EAAAC,OACA,SAAAG,GACA,MAAAT,GAAAU,OAAAD,EAAAH,QAGAN,EAAAU,QAAAqB,MAAA,6BAEA2B,YAAA,SAAAnD,GACA,MAAAA,IAAA,gBAAAA,GAGAR,EAAA4D,IAAAzD,EAAA1B,YAAAtC,QAAA,gBAAAqE,GACAZ,KAAA,SAAAU,GACA,MAAAL,GAAAQ,KAAAH,EAAAC,OACA,SAAAG,GACA,MAAAT,GAAAU,OAAAD,EAAAH,QANAN,EAAAU,QAAAqB,MAAA,mBASA6B,eAAA,SAAAC,GACA,MAAA9D,GAAAK,KAAAF,EAAA1B,YAAAtC,QAAA,mBAAA2H,MAAAA,IACAlE,KAAA,SAAAU,GACA,MAAAL,GAAAQ,KAAAH,EAAAC,OACA,SAAAG,GACA,MAAAT,GAAAU,OAAAD,EAAAH,SAGAwD,cAAA,SAAAC,GACA,MAAAhE,GAAAK,KAAAF,EAAA1B,YAAAtC,QAAA,iBAAA6H,GACApE,KAAA,SAAAU,GAKA,MAJAA,GAAAC,KAAApD,SAAAmD,EAAAC,KAAAC,QACAL,EAAA7B,WAAAgC,EAAAC,MACA1D,EAAAa,WAAA,WAAA4C,EAAAC,OAEAN,EAAAQ,KAAAH,EAAAC,OACA,SAAAG,GACA,MAAAT,GAAAU,OAAAD,EAAAH,SAGA0D,eAAA,SAAAD,GACA,MAAA7D,GAAAlC,gBACA+B,EAAAK,KAAAF,EAAA1B,YAAAtC,QAAA,kBAAA6H,GACApE,KAAA,SAAAU,GACA,MAAAL,GAAAQ,KAAAH,EAAAC,OACA,SAAAG,GACA,MAAAT,GAAAU,OAAAD,EAAAH,QAGAN,EAAAU,QAAAqB,MAAA,6BAEAkC,YAAA,SAAAC,GACA,MAAAhE,GAAAlC,gBACA+B,EAAAK,KAAAF,EAAA1B,YAAAtC,QAAA,gBAAAgI,SAAAA,IACAvE,KAAA,SAAAU,GACA,MAAAL,GAAAQ,KAAAH,EAAAC,OACA,SAAAG,GACA,MAAAT,GAAAU,OAAAD,EAAAH,QAGAN,EAAAU,QAAAqB,MAAA,6BAEAoC,iBAAA,SAAA3B,GACA,MAAAzC,GAAA4D,IAAAzD,EAAA1B,YAAAtC,QAAA,qBAAAkI,mBAAA5B,IACA7C,KAAA,WACA,MAAAK,GAAAQ,MAAA,IACA,SAAAC,GACA,MAAA,OAAAA,EAAA4D,OACArE,EAAAU,QAAA,GAEAV,EAAAU,OAAAD,EAAAH,SAGAgE,cAAA,SAAAT,GACA,MAAA9D,GAAA4D,IAAAzD,EAAA1B,YAAAtC,QAAA,kBAAAkI,mBAAAP,IACAlE,KAAA,WACA,MAAAK,GAAAQ,MAAA,IACA,SAAAC,GACA,MAAA,OAAAA,EAAA4D,OACArE,EAAAU,QAAA,GAEAV,EAAAU,OAAAD,EAAAH,eAgDAiE,QAAA,yBAAA,aAAA,KAAA,UAAA,YAAA,oBAAA,SAAA3H,EAAAoD,EAAAnE,EAAA2I,EAAAtE,GA4BA,QAAAuE,GAAA7D,EAAAzE,GACAG,EAAAG,KAAAmE,CACA,KAAA,GAAA1B,GAAA,EAAAA,EAAA/C,EAAA4C,OAAAG,IACA,GAAA5C,EAAAI,OAAAP,EAAA+C,GACA,OAAA,CAGA,QAAA,EAlCA,GAAAqF,GAAAvI,KACAM,EAAAT,EAAAU,SAAAC,cAAA,KACAxB,EAAAkF,EAAA1B,YACArC,EAAAnB,EAAAmB,SAEAoI,GAAAG,QAAA,SAAAA,GACA,GAAA3G,GAAAmC,EAAA9B,YASA,OARAL,IAAAA,EAAAwC,OACAL,EAAAd,eAEAqF,EAAAC,EAAA9D,IAAAzE,IACA4B,GAAAA,EAAAwC,QACAmE,EAAAC,QAAAC,cAAA,UAAA7G,EAAAwC,MAAA,IAAAxC,EAAA0E,UAGAiC,GAGAH,EAAAM,cAAA,SAAAC,GAMA,MAJAL,GAAAK,EAAA9J,OAAA4F,IAAAzE,IAAA,MAAA2I,EAAAT,QAAAnE,EAAAlC,kBACAkC,EAAApD,gBACAF,EAAAa,WAAA,YAAA,oBAEAuC,EAAAU,OAAAoE,QAqBGhK","file":"ng-superlogin.min.js","sourcesContent":["/**\n * @license ng-superlogin v0.2.2\n * (c) 2015 Colin Skow\n * License: MIT\n */\n(function(angular) {\n'use strict';\n/* global angular */\n/* jshint -W097 */\n\nangular.module('superlogin', [])\n\n  .config([\"$httpProvider\", function($httpProvider) {\n    $httpProvider.interceptors.push('superloginInterceptor');\n  }])\n\n  .factory('slDateNow', function() {\n    return function(){\n      return Date.now();\n    };\n  })\n\n  .provider('superloginSession', [\"$windowProvider\", function($windowProvider) {\n    var $window = $windowProvider.$get();\n    var _config, _session, _refreshCB, _refreshInProgress;\n    var self = this;\n\n    this.configure = function(config) {\n      config = config || {};\n      config.baseUrl = config.baseUrl || '/auth/';\n      if(!config.endpoints || !(config.endpoints instanceof Array)) {\n        config.endpoints = [];\n      }\n      if(!config.noDefaultEndpoint) {\n        var parser = $window.document.createElement('a');\n        parser.href = '/';\n        config.endpoints.push(parser.host);\n      }\n      config.providers = config.providers || [];\n      _config = config;\n    };\n\n    this.$get = [\"$window\", \"$rootScope\", \"slDateNow\", function($window, $rootScope, slDateNow) {\n      // Apply defaults if there is no config\n      if(!_config) {\n        self.configure({});\n      }\n      var storage;\n      if(_config.storage === 'session') {\n        storage = $window.sessionStorage;\n      } else {\n       storage = $window.localStorage;\n      }\n      $rootScope.superlogin = {};\n\n      // Login and logout handlers\n      $rootScope.$on('sl:login', function(event, session) {\n        $rootScope.superlogin.session = session;\n        $rootScope.superlogin.authenticated = true;\n      });\n      $rootScope.$on('sl:logout', function() {\n        $rootScope.superlogin.session = null;\n        $rootScope.superlogin.authenticated = false;\n      });\n\n      // Setup the new session\n      _session = JSON.parse(storage.getItem('superlogin.session'));\n      if(_session) {\n        $rootScope.$broadcast('sl:login', _session);\n      }\n\n      function deleteSession() {\n        storage.removeItem('superlogin.session');\n        _session = null;\n      }\n\n      function checkExpired() {\n        // This is not necessary if we are not authenticated\n        if(!_session || !_session.user_id) {\n          return;\n        }\n        var expires = _session.expires;\n        var timeDiff = _session.serverTimeDiff || 0;\n        // Only compensate for time difference if it is greater than 5 seconds\n        if(Math.abs(timeDiff) < 5000) {\n          timeDiff = 0;\n        }\n        var estimatedServerTime = slDateNow() + timeDiff;\n        if(estimatedServerTime > expires) {\n          deleteSession();\n          $rootScope.$broadcast('sl:logout', 'Session expired');\n        }\n      }\n\n      // Check expired\n      if(_config.checkExpired === 'startup' || _config.checkExpired === 'stateChange') {\n        checkExpired();\n      }\n      if(_config.checkExpired === 'stateChange') {\n        // Events for both Angular Router and UI Router\n        $rootScope.$on('$routeChangeStart', function() {\n          checkExpired();\n        });\n        $rootScope.$on('$stateChangeStart', function() {\n          checkExpired();\n        });\n      }\n\n      return {\n        authenticated: function() {\n          return !!(_session && _session.user_id);\n        },\n        getSession: function() {\n          return _session || JSON.parse(storage.getItem('superlogin.session'));\n        },\n        setSession: function(session) {\n          _session = session;\n          storage.setItem('superlogin.session', JSON.stringify(_session));\n        },\n        deleteSession: deleteSession,\n        getConfig: function() {\n          return _config;\n        },\n        getDbUrl: function(dbName) {\n          if(_session.userDBs && _session.userDBs[dbName]) {\n            return _session.userDBs[dbName];\n          } else {\n            return null;\n          }\n        },\n        confirmRole: function(role) {\n          if (!_session || !_session.roles || !_session.roles.length) return false;\n          return _session.roles.indexOf(role) !== -1;\n        },\n        confirmAnyRole: function(roles) {\n          if (!_session || !_session.roles || !_session.roles.length) return false;\n          for (var i = 0; i < roles.length; i++) {\n            if (_session.roles.indexOf(roles[i]) !== -1) return true;\n          }\n        },\n        confirmAllRoles: function(roles) {\n          if (!_session || !_session.roles || !_session.roles.length) return false;\n          for (var i = 0; i < roles.length; i++) {\n            if (_session.roles.indexOf(roles[i]) === -1) return false;\n          }\n          return true;\n        },\n        checkExpired: checkExpired,\n        checkRefresh: function() {\n          // Get out if we are not authenticated or a refresh is already in progress\n          if(_refreshInProgress || (!_session || !_session.user_id)) {\n            return;\n          }\n          var issued = _session.issued;\n          var expires = _session.expires;\n          var threshold = _config.refreshThreshold || 0.5;\n          var duration = expires - issued;\n          var timeDiff = _session.serverTimeDiff || 0;\n          if(Math.abs(timeDiff) < 5000) {\n            timeDiff = 0;\n          }\n          var estimatedServerTime = slDateNow() + timeDiff;\n          var elapsed = estimatedServerTime - issued;\n          var ratio = elapsed / duration;\n          if((ratio > threshold) && (typeof _refreshCB === 'function')) {\n            _refreshInProgress = true;\n            _refreshCB()\n              .then(function() {\n                _refreshInProgress = false;\n              }, function() {\n                _refreshInProgress = false;\n              });\n          }\n        },\n        onRefresh: function(cb) {\n          _refreshCB = cb;\n        }\n      };\n    }];\n\n  }])\n\n  .provider('superlogin', [\"superloginSessionProvider\", function(superloginSessionProvider) {\n\n    this.configure = superloginSessionProvider.configure;\n\n    this.$get = [\"$http\", \"$q\", \"$window\", \"$interval\", \"$rootScope\", \"superloginSession\", \"slDateNow\", function($http, $q, $window, $interval, $rootScope, superloginSession, slDateNow) {\n\n      var oauthDeferred, oauthComplete;\n\n      $window.superlogin = {};\n      $window.superlogin.oauthSession = function(error, session, link) {\n        if(!error && session) {\n          session.serverTimeDiff = session.issued - slDateNow();\n          superloginSession.setSession(session);\n          $rootScope.$broadcast('sl:login', session);\n          oauthDeferred.resolve(session);\n        } else if(!error && link) {\n          $rootScope.$broadcast('sl:link', link);\n          oauthDeferred.resolve(capitalizeFirstLetter(link) + ' successfully linked.');\n        } else {\n          oauthDeferred.reject(error);\n        }\n        oauthComplete = true;\n        $rootScope.$apply();\n      };\n\n      superloginSession.onRefresh(refresh);\n\n      return {\n        authenticated: superloginSession.authenticated,\n        getConfig: superloginSession.getConfig,\n        getSession: superloginSession.getSession,\n        deleteSession: superloginSession.deleteSession,\n        getDbUrl: superloginSession.getDbUrl,\n        confirmRole: superloginSession.confirmRole,\n        confirmAnyRole: superloginSession.confirmAnyRole,\n        confirmAllRoles: superloginSession.confirmAllRoles,\n        refresh: refresh,\n        checkRefresh: superloginSession.checkRefresh,\n        checkExpired: superloginSession.checkExpired,\n        authenticate: function() {\n          var deferred = $q.defer();\n          var session = superloginSession.getSession();\n          if(session) {\n            deferred.resolve(session);\n          } else {\n            $rootScope.$on('sl:login', function(event, newSession) {\n              deferred.resolve(newSession);\n            });\n          }\n          return deferred.promise;\n        },\n        login: function(credentials) {\n          if(!credentials.username || !credentials.password) {\n            return $q.reject('Username or Password missing...');\n          }\n          var req = {\n            method: 'POST',\n            url: superloginSession.getConfig().baseUrl + 'login',\n            data: credentials\n          };\n          return $http(req)\n            .then(function(res) {\n              res.data.serverTimeDiff = res.data.issued - slDateNow();\n              superloginSession.setSession(res.data);\n              $rootScope.$broadcast('sl:login', res.data);\n              return $q.when(res.data);\n            }, function(err) {\n              superloginSession.deleteSession();\n              return $q.reject(err.data);\n            });\n        },\n        register: function(registration) {\n          var req = {\n            method: 'POST',\n            url: superloginSession.getConfig().baseUrl + 'register',\n            data: registration\n          };\n          return $http(req)\n            .then(function(res) {\n              if(res.data.user_id && res.data.token) {\n                res.data.serverTimeDiff = res.data.issued - slDateNow();\n                superloginSession.setSession(res.data);\n                $rootScope.$broadcast('sl:login', res.data);\n              }\n              return $q.when(res.data);\n            }, function(err) {\n              return $q.reject(err.data);\n            });\n        },\n        logout: function(msg) {\n          return $http.post(superloginSession.getConfig().baseUrl + 'logout', {})\n            .then(function(res) {\n              superloginSession.deleteSession();\n              $rootScope.$broadcast('sl:logout', msg || 'Logged out');\n              return $q.when(res.data);\n            }, function(err) {\n              superloginSession.deleteSession();\n              $rootScope.$broadcast('sl:logout', msg || 'Logged out');\n              return $q.reject(err.data);\n            });\n        },\n        logoutAll: function(msg) {\n          return $http.post(superloginSession.getConfig().baseUrl + 'logout-all', {})\n            .then(function(res) {\n              superloginSession.deleteSession();\n              $rootScope.$broadcast('sl:logout', msg || 'Logged out');\n              return $q.when(res.data);\n            }, function(err) {\n              superloginSession.deleteSession();\n              $rootScope.$broadcast('sl:logout', msg || 'Logged out');\n              return $q.when(err.data);\n            });\n        },\n        logoutOthers: function() {\n          return $http.post(superloginSession.getConfig().baseUrl + 'logout-others', {})\n            .then(function(res) {\n              return $q.when(res.data);\n            }, function(err) {\n              return $q.reject(err.data);\n            });\n        },\n        socialAuth: function(provider) {\n          var providers = superloginSession.getConfig().providers;\n          if(providers.indexOf(provider) === -1) {\n            return $q.reject({error: 'Provider ' + provider + ' not supported.'});\n          }\n          return oAuthPopup(superloginSession.getConfig().baseUrl + provider, {windowTitle: 'Login with ' + capitalizeFirstLetter(provider)});\n        },\n        tokenSocialAuth: function(provider, accessToken) {\n          var providers = superloginSession.getConfig().providers;\n          if(providers.indexOf(provider) === -1) {\n            return $q.reject({error: 'Provider ' + provider + ' not supported.'});\n          }\n          return $http.post(superloginSession.getConfig().baseUrl + provider + '/token', {access_token: accessToken})\n            .then(function(res) {\n              if(res.data.user_id && res.data.token) {\n                res.data.serverTimeDiff = res.data.issued - slDateNow();\n                superloginSession.setSession(res.data);\n                $rootScope.$broadcast('sl:login', res.data);\n              }\n              return $q.when(res.data);\n            }, function(err) {\n              return $q.reject(err.data);\n            });\n        },\n        tokenLink: function(provider, accessToken) {\n          var providers = superloginSession.getConfig().providers;\n          if(providers.indexOf(provider) === -1) {\n            return $q.reject({error: 'Provider ' + provider + ' not supported.'});\n          }\n          return $http.post(superloginSession.getConfig().baseUrl + 'link/' + provider + '/token', {access_token: accessToken})\n            .then(function(res) {\n              return $q.when(res.data);\n            }, function(err) {\n              return $q.reject(err.data);\n            });\n        },\n        link: function(provider) {\n          var providers = superloginSession.getConfig().providers;\n          if(providers.indexOf(provider) === -1) {\n            return $q.reject({error: 'Provider ' + provider + ' not supported.'});\n          }\n          if(superloginSession.authenticated()) {\n            var session = superloginSession.getSession();\n            var linkURL = superloginSession.getConfig().baseUrl + 'link/' + provider + '?bearer_token=' + session.token + ':' + session.password;\n            return oAuthPopup(linkURL, {windowTitle: 'Link your account to ' + capitalizeFirstLetter(provider)});\n          }\n          return $q.reject({error: 'Authentication required'});\n        },\n        unlink: function(provider) {\n          var providers = superloginSession.getConfig().providers;\n          if(providers.indexOf(provider) === -1) {\n            return $q.reject({error: 'Provider ' + provider + ' not supported.'});\n          }\n          if(superloginSession.authenticated()) {\n            return $http.post(superloginSession.getConfig().baseUrl + 'unlink/' + provider)\n              .then(function(res) {\n                return $q.when(res.data);\n              }, function(err) {\n                return $q.reject(err.data);\n              });\n          }\n          return $q.reject({error: 'Authentication required'});\n        },\n        verifyEmail: function(token) {\n          if(!token || typeof token !== 'string') {\n            return $q.reject({error: 'Invalid token'});\n          }\n          return $http.get(superloginSession.getConfig().baseUrl + 'verify-email/' + token)\n            .then(function(res) {\n              return $q.when(res.data);\n            }, function(err) {\n              return $q.reject(err.data);\n            });\n        },\n        forgotPassword: function(email) {\n          return $http.post(superloginSession.getConfig().baseUrl + 'forgot-password', {email: email})\n            .then(function(res) {\n              return $q.when(res.data);\n            }, function(err) {\n              return $q.reject(err.data);\n            });\n        },\n        resetPassword: function(form) {\n          return $http.post(superloginSession.getConfig().baseUrl + 'password-reset', form)\n            .then(function(res) {\n              if(res.data.user_id && res.data.token) {\n                superloginSession.setSession(res.data);\n                $rootScope.$broadcast('sl:login', res.data);\n              }\n              return $q.when(res.data);\n            }, function(err) {\n              return $q.reject(err.data);\n            });\n        },\n        changePassword: function(form) {\n          if(superloginSession.authenticated()) {\n            return $http.post(superloginSession.getConfig().baseUrl + 'password-change', form)\n              .then(function (res) {\n                return $q.when(res.data);\n              }, function (err) {\n                return $q.reject(err.data);\n              });\n          }\n          return $q.reject({error: 'Authentication required'});\n        },\n        changeEmail: function(newEmail) {\n          if(superloginSession.authenticated()) {\n            return $http.post(superloginSession.getConfig().baseUrl + 'change-email', {newEmail: newEmail})\n              .then(function (res) {\n                return $q.when(res.data);\n              }, function (err) {\n                return $q.reject(err.data);\n              });\n          }\n          return $q.reject({error: 'Authentication required'});\n        },\n        validateUsername: function(username) {\n          return $http.get(superloginSession.getConfig().baseUrl + 'validate-username/' + encodeURIComponent(username))\n            .then(function() {\n              return $q.when(true);\n            }, function(err) {\n              if(err.status === 409) {\n                return $q.reject(false);\n              }\n              return $q.reject(err.data);\n            });\n        },\n        validateEmail: function(email) {\n          return $http.get(superloginSession.getConfig().baseUrl + 'validate-email/' + encodeURIComponent(email))\n            .then(function () {\n              return $q.when(true);\n            }, function (err) {\n              if(err.status === 409) {\n                return $q.reject(false);\n              }\n              return $q.reject(err.data);\n            });\n        }\n      };\n\n      function refresh() {\n        var session = superloginSession.getSession();\n        return $http.post(superloginSession.getConfig().baseUrl + 'refresh', {})\n          .then(function(res) {\n            if(res.data.token && res.data.expires) {\n              session.expires = res.data.expires;\n              session.token = res.data.token;\n              superloginSession.setSession(session);\n              $rootScope.$broadcast('sl:refresh', session);\n              return $q.when(session);\n            }\n          }, function(err) {\n            return $q.reject(err.data);\n          });\n      }\n\n      function oAuthPopup(url, options) {\n        oauthDeferred = $q.defer();\n        oauthComplete = false;\n        options.windowName = options.windowName ||  'Social Login';\n        options.windowOptions = options.windowOptions || 'location=0,status=0,width=800,height=600';\n        var _oauthWindow = $window.open(url, options.windowName, options.windowOptions);\n        var _oauthInterval = $interval(function(){\n          if (_oauthWindow.closed) {\n            $interval.cancel(_oauthInterval);\n            if(!oauthComplete) {\n              oauthDeferred.reject('Authorization cancelled');\n              oauthComplete = true;\n            }\n          }\n        }, 500);\n        return oauthDeferred.promise;\n      }\n\n      // Capitalizes the first letter of a string\n      function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n      }\n\n    }];\n\n  }])\n\n  .service('superloginInterceptor', [\"$rootScope\", \"$q\", \"$window\", \"$location\", \"superloginSession\", function($rootScope, $q, $window, $location, superloginSession) {\n    var service = this;\n    var parser = $window.document.createElement('a');\n    var config = superloginSession.getConfig();\n    var endpoints = config.endpoints;\n\n    service.request = function(request) {\n      var session = superloginSession.getSession();\n      if(session && session.token) {\n        superloginSession.checkRefresh();\n      }\n      if(checkEndpoint(request.url, endpoints)) {\n        if(session && session.token) {\n          request.headers.Authorization = 'Bearer ' + session.token + ':' + session.password;\n        }\n      }\n      return request;\n    };\n\n    service.responseError = function(response) {\n      // If there is an unauthorized error from one of our endpoints and we are logged in...\n      if (checkEndpoint(response.config.url, endpoints) && response.status === 401 && superloginSession.authenticated()) {\n        superloginSession.deleteSession();\n        $rootScope.$broadcast('sl:logout', 'Session expired');\n      }\n      return $q.reject(response);\n    };\n\n    function checkEndpoint(url, endpoints) {\n      parser.href = url;\n      for(var i=0; i<endpoints.length; i++) {\n        if(parser.host === endpoints[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n  }]);\n\n})(angular);"],"sourceRoot":"/source/"}